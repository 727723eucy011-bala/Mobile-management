{"ast":null,"code":"// import axios from \"axios\";\n// const API_URL =\"https://8080-debfabbeabddfcfffbdacddbfcdceaaffcc.premiumproject.examly.io/api/plans\";\n// export const addPlan = async (plan) => {\n//  return await axios.post(`${API_URL}/addPlan`, plan);\n// };\n\n// export const getAllPlans = async () => {\n//  return await axios.get(`${API_URL}/allPlans`);\n// };\n\n// export const getPlansByType = async (type) => {\n//  return await axios.get(`${API_URL}/byType?type=${type}`);\n// };\n\n// export const getPlansSortedByPrice = async () => {\n//  return await axios.get(`${API_URL}/sortedByPrice`);\n// };\n\n// export const deletePlan = async (id) => {\n//  return await axios.delete(`${API_URL}/${id}`);\n// };\n\nimport axios from \"axios\";\nconst API_URL = \"http://localhost:8080/api/plans\";\nexport const addPlan = plan => {\n  return axios.post(`${API_URL}/addPlan`, plan);\n};\nexport const getAllPlans = () => {\n  return axios.get(`${API_URL}/allPlans`);\n};\nexport const getPlansByType = type => {\n  return axios.get(`${API_URL}/byType?type=${type}`);\n};\nexport const getPlansSortedByPrice = () => {\n  return axios.get(`${API_URL}/sortedByPrice`);\n};\nexport const deletePlan = id => {\n  return axios.delete(`${API_URL}/${id}`);\n};\nconst API_BASE_URL = 'http://localhost:8080';\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('token');\n  return {\n    'Content-Type': 'application/json',\n    ...(token && {\n      Authorization: `Bearer ${token}`\n    })\n  };\n};\nexport const planAPI = {\n  getAllPlans: async () => {\n    const response = await fetch(`${API_BASE_URL}/plan`);\n    if (!response.ok) throw new Error('Failed to fetch plans');\n    return response.json();\n  },\n  getPlanById: async planId => {\n    const response = await fetch(`${API_BASE_URL}/plan/${planId}`);\n    if (!response.ok) throw new Error('Failed to fetch plan');\n    return response.json();\n  },\n  addPlan: async plan => {\n    const response = await fetch(`${API_BASE_URL}/plan`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(plan)\n    });\n    if (!response.ok) throw new Error('Failed to add plan');\n    return response.json();\n  },\n  updatePlan: async (planId, plan) => {\n    const response = await fetch(`${API_BASE_URL}/plan/${planId}`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(plan)\n    });\n    if (!response.ok) throw new Error('Failed to update plan');\n    return response.json();\n  },\n  deletePlan: async planId => {\n    const response = await fetch(`${API_BASE_URL}/plan/${planId}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) throw new Error('Failed to delete plan');\n  }\n};\nexport const subscriptionAPI = {\n  createSubscription: async planId => {\n    const response = await fetch(`${API_BASE_URL}/subscription`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        planId\n      })\n    });\n    if (!response.ok) throw new Error('Failed to create subscription');\n    return response.json();\n  },\n  getUserSubscriptions: async userId => {\n    const response = await fetch(`${API_BASE_URL}/subscription/user/${userId}`, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) throw new Error('Failed to fetch subscriptions');\n    return response.json();\n  },\n  cancelSubscription: async subscriptionId => {\n    const response = await fetch(`${API_BASE_URL}/subscription/${subscriptionId}/cancel`, {\n      method: 'PUT',\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) throw new Error('Failed to cancel subscription');\n    return response.json();\n  }\n};\nexport const authAPI = {\n  login: async credentials => {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) throw new Error('Login failed');\n    return response.json();\n  },\n  registerUser: async userData => {\n    const response = await fetch(`${API_BASE_URL}/auth/register/user`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) throw new Error('Registration failed');\n    return response.json();\n  },\n  registerAdmin: async userData => {\n    const response = await fetch(`${API_BASE_URL}/auth/register/admin`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) throw new Error('Registration failed');\n    return response.json();\n  }\n};\nexport const adminAPI = {\n  getAllUsers: async () => {\n    const response = await fetch(`${API_BASE_URL}/admin/users`, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) throw new Error('Failed to fetch users');\n    return response.json();\n  },\n  getAllSubscriptions: async () => {\n    const response = await fetch(`${API_BASE_URL}/admin/subscriptions`, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) throw new Error('Failed to fetch subscriptions');\n    return response.json();\n  },\n  getAllTransactions: async () => {\n    const response = await fetch(`${API_BASE_URL}/admin/transactions`, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) throw new Error('Failed to fetch transactions');\n    return response.json();\n  }\n};","map":{"version":3,"names":["axios","API_URL","addPlan","plan","post","getAllPlans","get","getPlansByType","type","getPlansSortedByPrice","deletePlan","id","delete","API_BASE_URL","getAuthHeaders","token","localStorage","getItem","Authorization","planAPI","response","fetch","ok","Error","json","getPlanById","planId","method","headers","body","JSON","stringify","updatePlan","subscriptionAPI","createSubscription","getUserSubscriptions","userId","cancelSubscription","subscriptionId","authAPI","login","credentials","registerUser","userData","registerAdmin","adminAPI","getAllUsers","getAllSubscriptions","getAllTransactions"],"sources":["/home/cyborg/Documents/Localhost/reactapp/src/services/api.js"],"sourcesContent":["\n// import axios from \"axios\";\n// const API_URL =\"https://8080-debfabbeabddfcfffbdacddbfcdceaaffcc.premiumproject.examly.io/api/plans\";\n// export const addPlan = async (plan) => {\n//  return await axios.post(`${API_URL}/addPlan`, plan);\n// };\n\n// export const getAllPlans = async () => {\n//  return await axios.get(`${API_URL}/allPlans`);\n// };\n\n// export const getPlansByType = async (type) => {\n//  return await axios.get(`${API_URL}/byType?type=${type}`);\n// };\n\n// export const getPlansSortedByPrice = async () => {\n//  return await axios.get(`${API_URL}/sortedByPrice`);\n// };\n\n// export const deletePlan = async (id) => {\n//  return await axios.delete(`${API_URL}/${id}`);\n// };\n\n\n\nimport axios from \"axios\";\nconst API_URL =\"http://localhost:8080/api/plans\";\nexport const addPlan =  (plan) => {\n return  axios.post(`${API_URL}/addPlan`, plan);\n};\n\nexport const getAllPlans =  () => {\n return  axios.get(`${API_URL}/allPlans`);\n};\n\nexport const getPlansByType =  (type) => {\n return  axios.get(`${API_URL}/byType?type=${type}`);\n};\n\nexport const getPlansSortedByPrice =  () => {\n return  axios.get(`${API_URL}/sortedByPrice`);\n};\n\nexport const deletePlan =  (id) => {\n return  axios.delete(`${API_URL}/${id}`);\n};\n\n\nconst API_BASE_URL = 'http://localhost:8080';\n\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('token');\n  return {\n    'Content-Type': 'application/json',\n    ...(token && { Authorization: `Bearer ${token}` }),\n  };\n};\n\nexport const planAPI = {\n  getAllPlans: async () => {\n    const response = await fetch(`${API_BASE_URL}/plan`);\n    if (!response.ok) throw new Error('Failed to fetch plans');\n    return response.json();\n  },\n\n  getPlanById: async (planId) => {\n    const response = await fetch(`${API_BASE_URL}/plan/${planId}`);\n    if (!response.ok) throw new Error('Failed to fetch plan');\n    return response.json();\n  },\n\n  addPlan: async (plan) => {\n    const response = await fetch(`${API_BASE_URL}/plan`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(plan),\n    });\n    if (!response.ok) throw new Error('Failed to add plan');\n    return response.json();\n  },\n\n  updatePlan: async (planId, plan) => {\n    const response = await fetch(`${API_BASE_URL}/plan/${planId}`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(plan),\n    });\n    if (!response.ok) throw new Error('Failed to update plan');\n    return response.json();\n  },\n\n  deletePlan: async (planId) => {\n    const response = await fetch(`${API_BASE_URL}/plan/${planId}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Failed to delete plan');\n  },\n};\n\nexport const subscriptionAPI = {\n  createSubscription: async (planId) => {\n    const response = await fetch(`${API_BASE_URL}/subscription`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify({ planId }),\n    });\n    if (!response.ok) throw new Error('Failed to create subscription');\n    return response.json();\n  },\n\n  getUserSubscriptions: async (userId) => {\n    const response = await fetch(`${API_BASE_URL}/subscription/user/${userId}`, {\n      headers: getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Failed to fetch subscriptions');\n    return response.json();\n  },\n\n  cancelSubscription: async (subscriptionId) => {\n    const response = await fetch(`${API_BASE_URL}/subscription/${subscriptionId}/cancel`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Failed to cancel subscription');\n    return response.json();\n  },\n};\n\nexport const authAPI = {\n  login: async (credentials) => {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(credentials),\n    });\n    if (!response.ok) throw new Error('Login failed');\n    return response.json();\n  },\n\n  registerUser: async (userData) => {\n    const response = await fetch(`${API_BASE_URL}/auth/register/user`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(userData),\n    });\n    if (!response.ok) throw new Error('Registration failed');\n    return response.json();\n  },\n\n  registerAdmin: async (userData) => {\n    const response = await fetch(`${API_BASE_URL}/auth/register/admin`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(userData),\n    });\n    if (!response.ok) throw new Error('Registration failed');\n    return response.json();\n  },\n};\n\nexport const adminAPI = {\n  getAllUsers: async () => {\n    const response = await fetch(`${API_BASE_URL}/admin/users`, {\n      headers: getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Failed to fetch users');\n    return response.json();\n  },\n\n  getAllSubscriptions: async () => {\n    const response = await fetch(`${API_BASE_URL}/admin/subscriptions`, {\n      headers: getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Failed to fetch subscriptions');\n    return response.json();\n  },\n\n  getAllTransactions: async () => {\n    const response = await fetch(`${API_BASE_URL}/admin/transactions`, {\n      headers: getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Failed to fetch transactions');\n    return response.json();\n  },\n};\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAIA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,OAAO,GAAE,iCAAiC;AAChD,OAAO,MAAMC,OAAO,GAAKC,IAAI,IAAK;EACjC,OAAQH,KAAK,CAACI,IAAI,CAAC,GAAGH,OAAO,UAAU,EAAEE,IAAI,CAAC;AAC/C,CAAC;AAED,OAAO,MAAME,WAAW,GAAIA,CAAA,KAAM;EACjC,OAAQL,KAAK,CAACM,GAAG,CAAC,GAAGL,OAAO,WAAW,CAAC;AACzC,CAAC;AAED,OAAO,MAAMM,cAAc,GAAKC,IAAI,IAAK;EACxC,OAAQR,KAAK,CAACM,GAAG,CAAC,GAAGL,OAAO,gBAAgBO,IAAI,EAAE,CAAC;AACpD,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAIA,CAAA,KAAM;EAC3C,OAAQT,KAAK,CAACM,GAAG,CAAC,GAAGL,OAAO,gBAAgB,CAAC;AAC9C,CAAC;AAED,OAAO,MAAMS,UAAU,GAAKC,EAAE,IAAK;EAClC,OAAQX,KAAK,CAACY,MAAM,CAAC,GAAGX,OAAO,IAAIU,EAAE,EAAE,CAAC;AACzC,CAAC;AAGD,MAAME,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAO;IACL,cAAc,EAAE,kBAAkB;IAClC,IAAIF,KAAK,IAAI;MAAEG,aAAa,EAAE,UAAUH,KAAK;IAAG,CAAC;EACnD,CAAC;AACH,CAAC;AAED,OAAO,MAAMI,OAAO,GAAG;EACrBd,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAMe,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,OAAO,CAAC;IACpD,IAAI,CAACO,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC;EAEDC,WAAW,EAAE,MAAOC,MAAM,IAAK;IAC7B,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,SAASa,MAAM,EAAE,CAAC;IAC9D,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC;EAEDtB,OAAO,EAAE,MAAOC,IAAI,IAAK;IACvB,MAAMiB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,OAAO,EAAE;MACnDc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAEd,cAAc,CAAC,CAAC;MACzBe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC5B,IAAI;IAC3B,CAAC,CAAC;IACF,IAAI,CAACiB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;IACvD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC;EAEDQ,UAAU,EAAE,MAAAA,CAAON,MAAM,EAAEvB,IAAI,KAAK;IAClC,MAAMiB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,SAASa,MAAM,EAAE,EAAE;MAC7DC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEd,cAAc,CAAC,CAAC;MACzBe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC5B,IAAI;IAC3B,CAAC,CAAC;IACF,IAAI,CAACiB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC;EAEDd,UAAU,EAAE,MAAOgB,MAAM,IAAK;IAC5B,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,SAASa,MAAM,EAAE,EAAE;MAC7DC,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAEd,cAAc,CAAC;IAC1B,CAAC,CAAC;IACF,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC5D;AACF,CAAC;AAED,OAAO,MAAMU,eAAe,GAAG;EAC7BC,kBAAkB,EAAE,MAAOR,MAAM,IAAK;IACpC,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,eAAe,EAAE;MAC3Dc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAEd,cAAc,CAAC,CAAC;MACzBe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEL;MAAO,CAAC;IACjC,CAAC,CAAC;IACF,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;IAClE,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC;EAEDW,oBAAoB,EAAE,MAAOC,MAAM,IAAK;IACtC,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,sBAAsBuB,MAAM,EAAE,EAAE;MAC1ER,OAAO,EAAEd,cAAc,CAAC;IAC1B,CAAC,CAAC;IACF,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;IAClE,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC;EAEDa,kBAAkB,EAAE,MAAOC,cAAc,IAAK;IAC5C,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,iBAAiByB,cAAc,SAAS,EAAE;MACpFX,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEd,cAAc,CAAC;IAC1B,CAAC,CAAC;IACF,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;IAClE,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB;AACF,CAAC;AAED,OAAO,MAAMe,OAAO,GAAG;EACrBC,KAAK,EAAE,MAAOC,WAAW,IAAK;IAC5B,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,aAAa,EAAE;MACzDc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACU,WAAW;IAClC,CAAC,CAAC;IACF,IAAI,CAACrB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;IACjD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC;EAEDkB,YAAY,EAAE,MAAOC,QAAQ,IAAK;IAChC,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,qBAAqB,EAAE;MACjEc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACY,QAAQ;IAC/B,CAAC,CAAC;IACF,IAAI,CAACvB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IACxD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC;EAEDoB,aAAa,EAAE,MAAOD,QAAQ,IAAK;IACjC,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,sBAAsB,EAAE;MAClEc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACY,QAAQ;IAC/B,CAAC,CAAC;IACF,IAAI,CAACvB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IACxD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB;AACF,CAAC;AAED,OAAO,MAAMqB,QAAQ,GAAG;EACtBC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAM1B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,cAAc,EAAE;MAC1De,OAAO,EAAEd,cAAc,CAAC;IAC1B,CAAC,CAAC;IACF,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC;EAEDuB,mBAAmB,EAAE,MAAAA,CAAA,KAAY;IAC/B,MAAM3B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,sBAAsB,EAAE;MAClEe,OAAO,EAAEd,cAAc,CAAC;IAC1B,CAAC,CAAC;IACF,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;IAClE,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC;EAEDwB,kBAAkB,EAAE,MAAAA,CAAA,KAAY;IAC9B,MAAM5B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,qBAAqB,EAAE;MACjEe,OAAO,EAAEd,cAAc,CAAC;IAC1B,CAAC,CAAC;IACF,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjE,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}