{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8080';\nclass AuthService {\n  constructor() {\n    this.login = async (email, password) => {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('role', data.role);\n        localStorage.setItem('userId', data.userId);\n        return data;\n      } else {\n        throw new Error('Login failed');\n      }\n    };\n    this.register = async (email, password, role = 'USER') => {\n      const endpoint = role === 'ADMIN' ? '/auth/register/admin' : '/auth/register/user';\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Registration failed');\n      }\n      return response.text();\n    };\n    this.logout = () => {\n      localStorage.removeItem('token');\n      localStorage.removeItem('role');\n      localStorage.removeItem('userId');\n    };\n    this.getCurrentUser = () => {\n      return {\n        token: localStorage.getItem('token'),\n        role: localStorage.getItem('role'),\n        userId: localStorage.getItem('userId')\n      };\n    };\n    this.isAuthenticated = () => {\n      return !!localStorage.getItem('token');\n    };\n    this.isAdmin = () => {\n      return localStorage.getItem('role') === 'ADMIN';\n    };\n    this.getAuthHeaders = () => {\n      const token = localStorage.getItem('token');\n      return token ? {\n        Authorization: `Bearer ${token}`\n      } : {};\n    };\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["API_BASE_URL","AuthService","constructor","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","data","json","localStorage","setItem","token","role","userId","Error","register","endpoint","text","logout","removeItem","getCurrentUser","getItem","isAuthenticated","isAdmin","getAuthHeaders","Authorization"],"sources":["/home/cyborg/Documents/Localhost/reactapp/src/services/authService.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8080';\n\nclass AuthService {\n  login = async (email, password) => {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('role', data.role);\n      localStorage.setItem('userId', data.userId);\n      return data;\n    } else {\n      throw new Error('Login failed');\n    }\n  };\n\n  register = async (email, password, role = 'USER') => {\n    const endpoint = role === 'ADMIN' ? '/auth/register/admin' : '/auth/register/user';\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Registration failed');\n    }\n    return response.text();\n  };\n\n  logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('role');\n    localStorage.removeItem('userId');\n  };\n\n  getCurrentUser = () => {\n    return {\n      token: localStorage.getItem('token'),\n      role: localStorage.getItem('role'),\n      userId: localStorage.getItem('userId'),\n    };\n  };\n\n  isAuthenticated = () => {\n    return !!localStorage.getItem('token');\n  };\n\n  isAdmin = () => {\n    return localStorage.getItem('role') === 'ADMIN';\n  };\n\n  getAuthHeaders = () => {\n    const token = localStorage.getItem('token');\n    return token ? { Authorization: `Bearer ${token}` } : {};\n  };\n}\n\nexport default new AuthService();"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,WAAW,CAAC;EAAAC,YAAA;IAAA,KAChBC,KAAK,GAAG,OAAOC,KAAK,EAAEC,QAAQ,KAAK;MACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,aAAa,EAAE;QACzDQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACO,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QAClCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;QACzCF,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEH,IAAI,CAACK,IAAI,CAAC;QACvCH,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEH,IAAI,CAACM,MAAM,CAAC;QAC3C,OAAON,IAAI;MACb,CAAC,MAAM;QACL,MAAM,IAAIO,KAAK,CAAC,cAAc,CAAC;MACjC;IACF,CAAC;IAAA,KAEDC,QAAQ,GAAG,OAAOlB,KAAK,EAAEC,QAAQ,EAAEc,IAAI,GAAG,MAAM,KAAK;MACnD,MAAMI,QAAQ,GAAGJ,IAAI,KAAK,OAAO,GAAG,sBAAsB,GAAG,qBAAqB;MAClF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,GAAGuB,QAAQ,EAAE,EAAE;QACzDf,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIQ,KAAK,CAAC,qBAAqB,CAAC;MACxC;MACA,OAAOf,QAAQ,CAACkB,IAAI,CAAC,CAAC;IACxB,CAAC;IAAA,KAEDC,MAAM,GAAG,MAAM;MACbT,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;MAChCV,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;MAC/BV,YAAY,CAACU,UAAU,CAAC,QAAQ,CAAC;IACnC,CAAC;IAAA,KAEDC,cAAc,GAAG,MAAM;MACrB,OAAO;QACLT,KAAK,EAAEF,YAAY,CAACY,OAAO,CAAC,OAAO,CAAC;QACpCT,IAAI,EAAEH,YAAY,CAACY,OAAO,CAAC,MAAM,CAAC;QAClCR,MAAM,EAAEJ,YAAY,CAACY,OAAO,CAAC,QAAQ;MACvC,CAAC;IACH,CAAC;IAAA,KAEDC,eAAe,GAAG,MAAM;MACtB,OAAO,CAAC,CAACb,YAAY,CAACY,OAAO,CAAC,OAAO,CAAC;IACxC,CAAC;IAAA,KAEDE,OAAO,GAAG,MAAM;MACd,OAAOd,YAAY,CAACY,OAAO,CAAC,MAAM,CAAC,KAAK,OAAO;IACjD,CAAC;IAAA,KAEDG,cAAc,GAAG,MAAM;MACrB,MAAMb,KAAK,GAAGF,YAAY,CAACY,OAAO,CAAC,OAAO,CAAC;MAC3C,OAAOV,KAAK,GAAG;QAAEc,aAAa,EAAE,UAAUd,KAAK;MAAG,CAAC,GAAG,CAAC,CAAC;IAC1D,CAAC;EAAA;AACH;AAEA,eAAe,IAAIjB,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}